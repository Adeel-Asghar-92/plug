import { AnimatePresence, motion } from "framer-motion";
import { Eye, Wand2 } from "lucide-react";
import React, { useCallback, useEffect, useRef, useState } from "react";
import { Toaster, toast } from "react-hot-toast";

import axios from "axios";
import { useAuth } from "../contexts/AuthContext";
import { useNavigate } from "react-router-dom";

const EditImage = ({
  product,
  fetchSavedProducts,
  isOpen,
  setIsOpen,
  updateBy = "admin",
  email = "",
}) => {
  // State variables
  const [ratio, setRatio] = useState("5:5");
  const [width, setWidth] = useState(1024);
  const [height, setHeight] = useState(1024);
  const [prompt, setPrompt] = useState("");
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);
  const [generatingEightK, setGeneratingEightK] = useState(false);
  const [generatedImageUrls, setGeneratedImageUrls] = useState([]);

  const [showOriginalImageIndex, setShowOriginalImageIndex] = useState("");
  const [originalImage, setOriginalImage] = useState("");
  const [currentEditImage, setCurrentEditImage] = useState("");

  const [editImageUrl, setEditImageUrl] = useState(""); // This will hold the URL of the image generated by the "Generate" button

  const navigate = useNavigate();
  const { user } = useAuth();

  // Constants for image dimensions
  const DIMENSIONS = [
    { label: "5:5", w: 70, h: 70, value_width: 1024, value_height: 1024 },
    { label: "3:5", w: 50, h: 70, value_width: 614, value_height: 1024 },
    { label: "3:4", w: 70, h: 50, value_width: 1024, value_height: 900 },
    { label: "Custom", w: 90, h: 50, value_width: 0, value_height: 0 },
  ];

  // Helper function to normalize image URLs
  const getImageUrl = (url) => {
    if (!url) return "";
    if (url.startsWith("http") || url.startsWith("/uploads/")) {
      return url;
    }
    if (url.startsWith("//")) {
      return `https:${url}`;
    }
    return url;
  };

  const processImageForEdit = useCallback(async () => {
    if (!product.productId) return;

    setGeneratingEightK(true);
    setEditImageUrl(""); // Clear previously generated image when 8K update is triggered

    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASEURL}/api/process-image`,
        {
          imageUrl: getImageUrl(product.imageUrl),
          retouch: "yes", // Always send "yes" for 8K update
          email: user.email,
        },
        {
          headers: { "Content-Type": "application/json" },
        }
      );

      setOriginalImage(response.data.data.orginal);
      setCurrentEditImage(response.data.data.converted); // This is likely the processed image for editing

      if (response.data.data.retouchImage) {
        setGeneratedImageUrls([response.data.data.retouchImage]); // Set the 8K image here
        toast.success("8K image updated successfully!");
      } else {
        setGeneratedImageUrls([]);
      }
      setShowOriginalImageIndex(""); // Show the generated 8K image by default
    } catch (error) {
      console.error("Error processing 8K image:", error);
      toast.error(
        error?.response?.data?.message ||
          "Something went wrong during 8K update! Please try again later."
      );
    } finally {
      setGeneratingEightK(false);
    }
  }, [product.productId, product.imageUrl, user.email]);

  const handleSaveImageUrl = useCallback(
    async (imageUrlToSave, productId) => {
      setSaving(true);
      try {
        const updateData = { imageUrl: imageUrlToSave };

        let response;
        if (updateBy === "admin") {
          response = await axios.put(
            `${process.env.REACT_APP_API_BASEURL}/api/admin/products/${productId}`,
            updateData,
            {
              params: { email: process.env.REACT_APP_ADMIN_EMAIL },
              withCredentials: true,
            }
          );
        } else if (updateBy === "user") {
          updateData.email = email;
          response = await axios.put(
            `${process.env.REACT_APP_API_BASEURL}/api/user/saved-products-image/${productId}`,
            updateData,
            {
              headers: { "Content-Type": "multipart/form-data" },
            }
          );
        } else {
          toast.error("Invalid update type.");
          return;
        }

        if (response.status === 200) {
          toast.success("Image saved successfully!");
          await fetchSavedProducts();
        }
      } catch (error) {
        console.error("Error updating image:", error);
        toast.error(
          error?.response?.data?.message ||
            "Something went wrong! Please try again later."
        );
      } finally {
        setSaving(false);
        setIsOpen(false);
      }
    },
    [updateBy, email, fetchSavedProducts, setIsOpen]
  );

  const handleSubmit = useCallback(async () => {
    setLoading(true);
    setGeneratedImageUrls([]); // Clear 8K images when generating a new one
    setShowOriginalImageIndex(""); // Reset 8K image view

    const data = {
      image: originalImage, // Use the original image for new generations
      email: user.email,
      aspectRatio: ratio,
      prompt: prompt,
    };
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_BASEURL}/api/edit-image`,
        data
      );
      setEditImageUrl(response.data.data); // Set the newly generated image
      toast.success("Image generated successfully!");
    } catch (error) {
      setEditImageUrl(""); // Clear if generation fails
      if (error?.response?.data?.reason === "token") {
        navigate("/pricing?error=Upgrade Plan or Buy Tokens");
      } else {
        toast.error(
          error?.response?.data?.message ||
            "Something went wrong! Please try again later."
        );
      }
    } finally {
      setLoading(false);
    }
  }, [originalImage, prompt, ratio, user.email, navigate]); // Depend on originalImage for new generation

  useEffect(() => {
    if (isOpen && product.imageUrl) {
      const initialImageUrl = getImageUrl(product.imageUrl);
      setCurrentEditImage(initialImageUrl);
      setOriginalImage(initialImageUrl); // Set original image to the product's image initially
      setGeneratedImageUrls([]); // Clear any previous generated 8K images
      setEditImageUrl(""); // Clear any previous 'generated' images from the prompt
      setPrompt(""); // Clear prompt
      setShowOriginalImageIndex(""); // Ensure 8K image view is reset
    }
  }, [isOpen, product.imageUrl]);

  return (
    <>
      {/* Modal */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <motion.div
              className="bg-gray-900 text-white rounded-2xl shadow-2xl p-8 w-full max-w-4xl"
              initial={{ y: 50, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
              exit={{ y: 50, opacity: 0 }}
              transition={{ type: "spring", stiffness: 300, damping: 25 }}
            >
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-semibold text-[#2ab6e4]">
                  Create
                </h2>
                <button
                  onClick={() => setIsOpen(false)}
                  className="text-gray-300 hover:text-white transition"
                  aria-label="Close modal"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    className="w-6 h-6"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                    strokeWidth="2"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      d="M6 18L18 6M6 6l12 12"
                    />
                  </svg>
                </button>
              </div>

              <div className="flex gap-8 flex-col md:flex-row">
                {/* Left side: Controls and Input */}
                <div className="flex-1 space-y-4 md:w-4/6">
                  <label className="text-sm font-medium text-gray-300">
                    Select Dimension
                  </label>
                  <div className="flex gap-4 flex-wrap">
                    {DIMENSIONS.map((dim, index) => (
                      <button
                        key={index}
                        onClick={() => {
                          setRatio(dim.label);
                          setWidth(dim.value_width);
                          setHeight(dim.value_height);
                        }}
                        className={`flex items-center justify-center bg-gray-800 border ${
                          ratio === dim.label
                            ? "border-[#2ab6e4]"
                            : "border-gray-700"
                        } hover:border-[#2ab6e4] text-white rounded-lg shadow-sm p-1 transition-all`}
                        style={{ width: `${dim.w}px`, height: `${dim.h}px` }}
                        aria-pressed={ratio === dim.label}
                      >
                        <div className="flex items-center justify-center w-full h-full bg-gray-600 rounded">
                          <span className="text-xs text-white">
                            {dim.label}
                          </span>
                        </div>
                      </button>
                    ))}
                  </div>

                  <div className="flex gap-3 items-center">
                    <div className="flex flex-col">
                      <label
                        htmlFor="width-input"
                        className="text-xs text-gray-300 mt-4"
                      >
                        Width (px)
                      </label>
                      <input
                        id="width-input"
                        type="number"
                        className="bg-gray-800 text-white border border-gray-700 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-[#2ab6e4]"
                        value={width}
                        onChange={(e) => setWidth(parseInt(e.target.value, 10))}
                        min={1}
                        disabled={ratio !== "Custom"}
                      />
                    </div>
                    <div className="flex flex-col">
                      <label
                        htmlFor="height-input"
                        className="text-xs text-gray-300 mt-4"
                      >
                        Height (px)
                      </label>
                      <input
                        id="height-input"
                        type="number"
                        className="bg-gray-800 text-white border border-gray-700 rounded-md px-3 py-1 text-sm focus:outline-none focus:ring-2 focus:ring-[#2ab6e4]"
                        value={height}
                        onChange={(e) =>
                          setHeight(parseInt(e.target.value, 10))
                        }
                        min={1}
                        disabled={ratio !== "Custom"}
                      />
                    </div>
                  </div>

                  <div className="flex flex-col">
                    <label
                      htmlFor="prompt-textarea"
                      className="text-sm font-medium text-gray-300 mt-4"
                    >
                      Prompt
                    </label>
                    <textarea
                      id="prompt-textarea"
                      rows={4}
                      className="bg-gray-900 text-white border border-gray-700 rounded-lg px-4 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-[#2ab6e4] resize-none placeholder-gray-500"
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      placeholder="Describe your image idea in detail..."
                    />
                  </div>

                  {/* Canvas for masking - Uncomment if ReactSketchCanvas is used */}
                  {/*
                    <div className="flex flex-col">
                      <button type="button" onClick={() => canvasRef.current?.clearCanvas()} className="bg-gray-500 text-white px-4 py-2 rounded">Clear Mask</button>
                    </div>
                    */}

                  <div className="flex justify-end gap-3 pt-4">
                    <button
                      onClick={processImageForEdit}
                      className="px-6 py-3 rounded-lg flex items-center justify-center bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500"
                      disabled={generatingEightK || !product.productId || loading} // Disable if 8K is loading or regular generation is loading
                    >
                      {generatingEightK ? (
                        <>
                          <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                          Processing 8K...
                        </>
                      ) : (
                        "8K Update"
                      )}
                    </button>

                    <motion.button
                      onClick={handleSubmit}
                      disabled={loading || !width || !height || !prompt || generatingEightK}
                      className={`px-6 py-3 rounded-lg flex items-center justify-center transition-all focus:outline-none focus:ring-2 focus:ring-[#2ab6e4] ${
                        loading || !width || !height || !prompt || generatingEightK
                          ? "bg-gray-600 cursor-not-allowed"
                          : "bg-gradient-to-r from-[#a017c9] to-[#2ab6e4] hover:shadow-lg hover:shadow-[#2ab6e4]/20"
                      }`}
                      variants={{
                        hover: { scale: 1.02 },
                        tap: { scale: 0.98 },
                      }}
                      whileHover={
                        !(loading || !width || !height || !prompt || generatingEightK)
                          ? "hover"
                          : {}
                      }
                      whileTap={
                        !(loading || !width || !height || !prompt || generatingEightK) ? "tap" : {}
                      }
                    >
                      {loading ? (
                        <>
                          <div className="w-5 h-5 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                          Generating...
                        </>
                      ) : (
                        <>Generate</>
                      )}
                    </motion.button>
                  </div>
                </div>

                {/* Right side: Output Images */}
                <div className="flex-1 md:w-3/6 overflow-y-auto max-h-[390px] sm:max-h-[390px] pt-4 md:pt-0">
                  {/* Display the generated 8K image (if available and not showing original) OR the newly generated image (if available) */}
                  {(generatedImageUrls.length > 0 && showOriginalImageIndex !== 0) ? (
                    // Display the single generated 8K image
                    <div className="bg-gray-800 p-1 mb-6 rounded-lg">
                      <img
                        src={generatedImageUrls[0]}
                        alt="Generated 8K Image"
                        className="w-full h-auto rounded-lg"
                      />
                      <div className="mt-2 text-center text-sm text-gray-300 font-medium inline-flex items-center gap-1">
                        <Wand2 className="w-4 h-4" /> Generated 8K Image
                      </div>
                      <div className="mt-3 flex space-x-4 justify-center items-center">
                        <button
                          onClick={() =>
                            handleSaveImageUrl(
                              generatedImageUrls[0],
                              product.productId
                            )
                          }
                          disabled={saving}
                          className={`px-4 py-1.5 text-sm font-medium rounded-md transition flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-opacity-50 ${
                            saving
                              ? "bg-gray-400 text-white cursor-not-allowed"
                              : "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500"
                          }`}
                        >
                          {saving ? (
                            <>
                              <div className="w-4 h-4 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                              Saving...
                            </>
                          ) : (
                            "Save"
                          )}
                        </button>

                        <button
                          onClick={() => setShowOriginalImageIndex(0)}
                          className={`flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition focus:outline-none focus:ring-0 focus:ring-offset-0 bg-purple-600 hover:bg-purple-700 text-white focus:ring-purple-500`}
                          aria-label="Show original image"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ) : editImageUrl ? (
                    // Display the image generated by the "Generate" button
                    <div className="bg-gray-800 p-1 mb-6 rounded-lg">
                      <img
                        src={editImageUrl}
                        alt="Generated Image"
                        className="w-full h-auto rounded-lg"
                      />
                      <div className="mt-2 text-center text-sm text-gray-300 font-medium inline-flex items-center gap-1">
                        <Wand2 className="w-4 h-4" /> Generated Image
                      </div>
                      <div className="mt-3 flex space-x-4 justify-center items-center">
                        <button
                          onClick={() =>
                            handleSaveImageUrl(
                              editImageUrl, // Save the generated image
                              product.productId
                            )
                          }
                          disabled={saving}
                          className={`px-4 py-1.5 text-sm font-medium rounded-md transition flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-opacity-50 ${
                            saving
                              ? "bg-gray-400 text-white cursor-not-allowed"
                              : "bg-blue-600 hover:bg-blue-700 text-white focus:ring-blue-500"
                          }`}
                        >
                          {saving ? (
                            <>
                              <div className="w-4 h-4 border-2 border-t-transparent border-white rounded-full animate-spin mr-2"></div>
                              Saving...
                            </>
                          ) : (
                            "Save"
                          )}
                        </button>
                        {/* Option to show original if only a prompt-generated image is shown */}
                        <button
                          onClick={() => {
                            setEditImageUrl(""); // Clear generated image to show original
                            setGeneratedImageUrls([]); // Clear 8K images as well if present
                          }}
                          className={`flex items-center justify-center px-4 py-2 text-sm font-medium rounded-md shadow-sm transition focus:outline-none focus:ring-0 focus:ring-offset-0 bg-purple-600 hover:bg-purple-700 text-white focus:ring-purple-500`}
                          aria-label="Show original image"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ) : (
                    // Always show the original image if no 8K or generated image is present
                    <div className="bg-gray-800 p-1 mb-6 rounded-lg">
                      <img
                        src={originalImage}
                        alt="Original Product"
                        className="w-full h-auto rounded-lg"
                      />
                      <div className="mt-2 text-center text-sm text-gray-300 font-medium inline-flex items-center gap-1">
                        <Eye className="w-4 h-4" /> Original Image
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default EditImage;